# -*- coding: utf-8 -*-
"""skyum_protocol

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/134ZNaulhdQDjzNnpNxVDphJooTqMLk19
"""

# Box Simulator

import random

class box:
  def __init__(self, box_number, box_inside_number):
    self.condition = False
    self.box_number = box_number
    self.box_inside_number = box_inside_number

  def open_box(self):
    if self.condition == True:
      return False #BOX already opend
    else:
      self.condition = False
      return self.box_inside_number

  def get_condition(self):
      return self.condition
  
  def get_box_number(self):
      return self.box_number
  
  def get_box_inside_number(self):
      return self.box_inside_number

class prisoner:
    def __init__(self, prisoner_number):
      self.prisoner_number = prisoner_number
      self.opend_list = []
      self.next_box = prisoner_number

    def get_prisoner_number(self):
      return self.prisoner_number
    
    def get_opend_list(self):
      return self.opend_list

    def get_next_box(self):
      return self.next_box

    def update_next_box(self, next_number):
      self.next_box = next_number

    def update_opend_list(self, opend):
      self.opend_list.append(opend)

class env_function:
    def __init__(self, lens):
      self.lens = lens
      self.randoms = []
      self.num_list = list(range(1, self.lens+1))
      self.randoms = random.sample(self.num_list, self.lens)

    def get_list(self):
      return self.randoms

def env_gen(number_of_boxs):
  box_list = []
  prisoner_list = []
  env_func = env_function(number_of_boxs)
  random_list = env_func.get_list()
  for i in range(number_of_boxs):
    box_list.append(box(i+1,random_list[i]))
    prisoner_list.append(prisoner(i+1))
  return box_list, prisoner_list

def condition_1(box_list, prisoner_list,condi):
  fail_flag = False
  fail_cnt = 0
  success_cnt = 0
  for iter in range(0,condi):
    for i in range(len(prisoner_list)):
      if fail_flag == True:
        fail_flag == False
        break
      else:
        for j in range(int((len(box_list)/2))+1):
          if j == int(len(box_list)/2) :
            fail_flag = True
            fail_cnt = fail_cnt +1
            break
          opend_number = box_list[prisoner_list[i].get_next_box()-1].open_box()
          if opend_number == False: 
            j = j - 1
          else:
            prisoner_list[i].update_opend_list(prisoner_list[i].get_next_box()-1)
            prisoner_list[i].update_next_box(opend_number)
            if opend_number == prisoner_list[i].get_prisoner_number():
              break
      if i == len(prisoner_list)-1:
        success_cnt = success_cnt + 1

    return success_cnt, fail_cnt

def condition_2(box_list, prisoner_list,condi):
  pass #to be implemented
  

def emulator(condition,num_of_box,iter):
  asc = 0
  afc = 0
  if condition == 1:
    for i in range(1000):
      box_list, prisoner_list = env_gen(num_of_box)
      sc, fc = condition_1(box_list,prisoner_list,1)
      asc = asc + sc
      afc = afc + fc
    return asc,afc

  elif condition ==2 :
    for i in range(1000):
      box_list, prisoner_list = env_gen(num_of_box)
      sc, fc = condition_1(box_list,prisoner_list,1)
      asc = asc + sc
      afc = afc + fc
    return asc,afc

asc, afc = emulator(1,6,300)
print(asc,afc)